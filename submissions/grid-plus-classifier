<!DOCTYPE html>
<html>
<head>
    <title>Facebook V: Predicting Check Ins | Kaggle</title>
    <meta charset="utf-8" />
    <meta name="robots" content="index, follow"/>

    

    <link href="/content/v/4e3f994e938b/kaggle/favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <link href="//fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic" rel='stylesheet' type='text/css'>

    <link rel="stylesheet" type="text/css" href="/static/css/kaggle-newworld-sitelayout.css?v=b06b66db98a9" />
    <link rel="stylesheet" type="text/css" href="/static/css/kaggle-newworld.css?v=e4cd4b9069a4" />
    
    
    
 
    
    <script>
          window.intercomSettings = {
            app_id: "koj6gxx6"
          };
    </script>
<script>(function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',intercomSettings);}else{var d=document;var i=function(){i.c(arguments)};i.q=[];i.c=function(args){i.q.push(args)};w.Intercom=i;function l(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/koj6gxx6';var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);}if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})()</script>
</head>
<body>
    


<div id="react-SiteHeaderContainer-2"></div>
<div class="wrapper">
    <div class="main-content">
        


<div id="react-ScriptViewer-1"></div>


<form action="/svpons/facebook-v-predicting-check-ins/grid-plus-classifier" id="__AjaxAntiForgeryForm" method="post"><input name="__RequestVerificationToken" type="hidden" value="l1UzCFdQErygIftFY3ZSSbJv9hcn_Fdw4mWuTJJZWCMgZmPMOkPi7TVLfTKZrEEp-Bi7HSkfIAhknLycSrBx4VrV5JM1" /></form>
<script type="text/javascript" src="/static/js/kaggle.prism.js?v=4cf34af6d62b"></script>
    </div>
    <footer class="site-footer">
    <div class="site-footer__content">
        <div class="site-footer__copyright">
            <span>&copy; 2016 Kaggle Inc</span>
        </div>
        <nav class="site-footer__nav">
            <a href="/team">Our Team</a>
            <a href="/careers">Careers</a>
            <a href="/terms">Terms</a>
            <a href="/privacy">Privacy</a>
            <a href="/Home/contact">Contact/Support</a>
        </nav>
        <nav class="site-footer__social">
            <a class="site-footer__social--twitter" href="http://www.twitter.com/kaggle" title="Follow Kaggle on Twitter"></a>
            <a class="site-footer__social--facebook" href="http://www.facebook.com/kaggle" title="Follow Kaggle on Facebook"></a>
            <a class="site-footer__social--linkedin" href="http://www.linkedin.com/companies/kaggle" title="Follow Kaggle on LinkedIn"></a>
        </nav>
    </div>
</footer>


</div>


<script type="text/javascript">
    var Kaggle = Kaggle || {};
    Kaggle.Current = {
        isAnonymous: true
    }
</script>



<script type="text/javascript" src="/content/v/47b68dce8cb6/shared/js/jquery-1.7.2.min.js"></script>
<script type="text/javascript" src="/static/js/react.min.js"></script>
<script type="text/javascript" src="/static/js/react-dom.min.js"></script>
<script type="text/javascript" src="/static/react-components.js?v=eb2fe6ef949b"></script><script type="text/javascript">
ReactDOM.render(React.createElement(KaggleReactComponents.ScriptViewer, {"pageMessages":[],"log":"{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:\u00221.9170036\u0022,\u0022data\u0022:\u0022Loading data ...\\n\u0022},{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:\u002248.276178\u0022,\u0022data\u0022:\u0022Feature engineering...\\n\u0022},{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:\u002248.2762471\u0022,\u0022data\u0022:\u0022    Computing some features from x and y ...\\n\u0022},{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:\u002248.6959106\u0022,\u0022data\u0022:\u0022    Creating datetime features ...\\n\u0022},{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:\u0022279.3603148\u0022,\u0022data\u0022:\u0022Computing the grid ...\\n\u0022},{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:\u0022280.6584409\u0022,\u0022data\u0022:\u0022Normalizing the data: (X - mean(X)) / std(X) ...\\n\u0022},{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:\u0022289.1458068\u0022,\u0022data\u0022:\u0022iteration: 0\\n\u0022},{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:\u0022335.420262\u0022,\u0022data\u0022:\u0022iteration: 10\\n\u0022},{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:\u0022378.1067179\u0022,\u0022data\u0022:\u0022iteration: 20\\n\u0022},{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:\u0022420.7560292\u0022,\u0022data\u0022:\u0022iteration: 30\\n\u0022},{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:\u0022462.9280681\u0022,\u0022data\u0022:\u0022iteration: 40\\n\u0022},{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:\u0022507.5392137\u0022,\u0022data\u0022:\u0022iteration: 50\\n\u0022},{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:\u0022550.5706389\u0022,\u0022data\u0022:\u0022iteration: 60\\n\u0022},{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:\u0022594.346739\u0022,\u0022data\u0022:\u0022iteration: 70\\n\u0022},{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:\u0022639.4406547\u0022,\u0022data\u0022:\u0022iteration: 80\\n\u0022},{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:\u0022684.2653341\u0022,\u0022data\u0022:\u0022iteration: 90\\n\u0022},{\u0022stream_name\u0022:\u0022stdout\u0022,\u0022time\u0022:\u0022728.5612132\u0022,\u0022data\u0022:\u0022Generating submission file ...\\n\u0022},","code":"# coding: utf-8\n__author__ = \u0027Sandro Vega Pons : https://www.kaggle.com/svpons\u0027\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import SGDClassifier\n\n\ndef prepare_data(df_train, df_test, n_cell_x, n_cell_y):\n    \u0022\u0022\u0022\n    Some feature engineering (mainly with the time feature) + normalization \n    of all features (substracting the mean and dividing by std) +  \n    computation of a grid (size = n_cell_x * n_cell_y), which is included\n    as a new column (grid_cell) in the dataframes.\n    \n    Parameters:\n    ----------    \n    df_train: pandas DataFrame\n              Training data\n    df_test : pandas DataFrame\n              Test data\n    n_cell_x: int\n              Number of grid cells on the x axis\n    n_cell_y: int\n              Number of grid cells on the y axis\n    \n    Returns:\n    -------    \n    df_train, df_test: pandas DataFrame\n                       Modified training and test datasets.\n    \u0022\u0022\u0022  \n    print(\u0027Feature engineering...\u0027)\n    print(\u0027    Computing some features from x and y ...\u0027)\n    ##x, y, and accuracy remain the same\n        ##New feature x/y\n    eps = 0.00001  #required to avoid some divisions by zero.\n    df_train[\u0027x_d_y\u0027] = df_train.x.values / (df_train.y.values + eps) \n    df_test[\u0027x_d_y\u0027] = df_test.x.values / (df_test.y.values + eps) \n        ##New feature x*y\n    df_train[\u0027x_t_y\u0027] = df_train.x.values * df_train.y.values  \n    df_test[\u0027x_t_y\u0027] = df_test.x.values * df_test.y.values\n    \n    print(\u0027    Creating datetime features ...\u0027)\n    ##time related features (assuming the time = minutes)\n    initial_date = np.datetime64(\u00272014-01-01T01:01\u0027,   #Arbitrary decision\n                                 dtype=\u0027datetime64[m]\u0027) \n        #working on df_train  \n    d_times = pd.DatetimeIndex(initial_date + np.timedelta64(int(mn), \u0027m\u0027) \n                               for mn in df_train.time.values)    \n    df_train[\u0027hour\u0027] = d_times.hour\n    df_train[\u0027weekday\u0027] = d_times.weekday\n    df_train[\u0027day\u0027] = d_times.day\n    df_train[\u0027month\u0027] = d_times.month\n    df_train[\u0027year\u0027] = d_times.year\n    df_train = df_train.drop([\u0027time\u0027], axis=1)\n        #working on df_test    \n    d_times = pd.DatetimeIndex(initial_date + np.timedelta64(int(mn), \u0027m\u0027) \n                               for mn in df_test.time.values)    \n    df_test[\u0027hour\u0027] = d_times.hour\n    df_test[\u0027weekday\u0027] = d_times.weekday\n    df_test[\u0027day\u0027] = d_times.day\n    df_test[\u0027month\u0027] = d_times.month\n    df_test[\u0027year\u0027] = d_times.year\n    df_test = df_test.drop([\u0027time\u0027], axis=1)\n    \n    print(\u0027Computing the grid ...\u0027)\n    #Creating a new colum with grid_cell id  (there will be \n    #n = (n_cell_x * n_cell_y) cells enumerated from 0 to n-1)\n    size_x = 10. / n_cell_x\n    size_y = 10. / n_cell_y\n        #df_train\n    xs = np.where(df_train.x.values \u003c eps, 0, df_train.x.values - eps)\n    ys = np.where(df_train.y.values \u003c eps, 0, df_train.y.values - eps)\n    pos_x = (xs / size_x).astype(np.int)\n    pos_y = (ys / size_y).astype(np.int)\n    df_train[\u0027grid_cell\u0027] = pos_y * n_cell_x + pos_x\n            #df_test\n    xs = np.where(df_test.x.values \u003c eps, 0, df_test.x.values - eps)\n    ys = np.where(df_test.y.values \u003c eps, 0, df_test.y.values - eps)\n    pos_x = (xs / size_x).astype(np.int)\n    pos_y = (ys / size_y).astype(np.int)\n    df_test[\u0027grid_cell\u0027] = pos_y * n_cell_x + pos_x \n    \n    ##Normalization\n    print(\u0027Normalizing the data: (X - mean(X)) / std(X) ...\u0027)\n    cols = [\u0027x\u0027, \u0027y\u0027, \u0027accuracy\u0027, \u0027x_d_y\u0027, \u0027x_t_y\u0027, \u0027hour\u0027, \n            \u0027weekday\u0027, \u0027day\u0027, \u0027month\u0027, \u0027year\u0027]\n    for cl in cols:\n        ave = df_train[cl].mean()\n        std = df_train[cl].std()\n        df_train[cl] = (df_train[cl].values - ave ) / std\n        df_test[cl] = (df_test[cl].values - ave ) / std\n        \n    #Returning the modified dataframes\n    return df_train, df_test\n\n\ndef process_one_cell(df_train, df_test, grid_id, th):\n    \u0022\u0022\u0022\n    Does all the processing inside a single grid cell: Computes the training\n    and test sets inside the cell. Fits a classifier to the training data\n    and predicts on the test data. Selects the top 3 predictions.\n    \n    Parameters:\n    ----------    \n    df_train: pandas DataFrame\n              Training set\n    df_test: pandas DataFrame\n             Test set\n    grid_id: int\n             The id of the grid to be analyzed\n    th: int\n       Threshold for place_id. Only samples with place_id with at least th\n       occurrences are kept in the training set.\n    \n    Return:\n    ------    \n    pred_labels: numpy ndarray\n                 Array with the prediction of the top 3 labels for each sample\n    row_ids: IDs of the samples in the submission dataframe \n    \u0022\u0022\u0022   \n    #Working on df_train\n    df_cell_train = df_train.loc[df_train.grid_cell == grid_id]\n    place_counts = df_cell_train.place_id.value_counts()\n    mask = place_counts[df_cell_train.place_id.values] \u003e= th\n    df_cell_train = df_cell_train.loc[mask.values]\n    \n    #Working on df_test\n    df_cell_test = df_test.loc[df_test.grid_cell == grid_id]\n    row_ids = df_cell_test.index\n    \n    le = LabelEncoder()\n    y = le.fit_transform(df_cell_train.place_id.values)\n    X = df_cell_train.drop([\u0027place_id\u0027, \u0027grid_cell\u0027], axis = 1).values\n\n    #Training Classifier\n    clf = SGDClassifier(loss=\u0027modified_huber\u0027, n_iter=1, random_state=0, n_jobs=-1)  \n    clf.fit(X, y)\n    X_test = df_cell_test.drop([\u0027grid_cell\u0027], axis = 1).values\n    y_pred = clf.predict_proba(X_test)\n\n    pred_labels = le.inverse_transform(np.argsort(y_pred, axis=1)[:,::-1][:,:3])    \n    return pred_labels, row_ids\n   \n   \ndef process_grid(df_train, df_test, df_sub, th, n_cells):\n    \u0022\u0022\u0022\n    Iterates over all grid cells and aggregates the results of individual cells\n    \u0022\u0022\u0022    \n    for g_id in range(n_cells):\n        if g_id % 10 == 0:\n            print(\u0027iteration: %s\u0027 %(g_id))\n        \n        #Applying classifier to one grid cell\n        pred_labels, row_ids = process_one_cell(df_train, df_test, g_id, th)\n        #Converting the prediction to the submission format\n        str_labels = np.apply_along_axis(lambda x: \u0027 \u0027.join(x.astype(str)), \n                                         1, pred_labels)\n        #Updating submission file\n        df_sub.loc[row_ids] = str_labels.reshape(-1,1)\n        \n    return df_sub       \n                 \n\nif __name__ == \u0027__main__\u0027:\n\n    print(\u0027Loading data ...\u0027)\n    df_train = pd.read_csv(\u0027../input/train.csv\u0027, dtype={\u0027x\u0027:np.float32, \n                                               \u0027y\u0027:np.float32, \n                                               \u0027accuracy\u0027:np.int16,\n                                               \u0027time\u0027:np.int,\n                                               \u0027place_id\u0027:np.int}, \n                                               index_col = 0)\n    df_test = pd.read_csv(\u0027../input/test.csv\u0027, dtype={\u0027x\u0027:np.float32,\n                                              \u0027y\u0027:np.float32, \n                                              \u0027accuracy\u0027:np.int16,\n                                              \u0027time\u0027:np.int,\n                                              \u0027place_id\u0027:np.int}, \n                                              index_col = 0)\n    df_sub = pd.read_csv(\u0027../input/sample_submission.csv\u0027, index_col = 0)   \n    \n    #Defining the size of the grid\n    n_cell_x = 10\n    n_cell_y = 10 \n    df_train, df_test = prepare_data(df_train, df_test, n_cell_x, n_cell_y)\n    \n    #Solving classification problems inside each grid cell\n    th = 500 #Threshold on place_id inside each cell. Only place_ids with at \n            #least th occurrences inside each grid_cell are considered. This\n            #is to avoid classes with very few samples and speed-up the \n            #computation.\n    \n    df_submission  = process_grid(df_train, df_test, df_sub, th, \n                                  n_cell_x * n_cell_y)                                 \n    #creating the submission\n    print(\u0027Generating submission file ...\u0027)\n    df_submission.to_csv(\u0022sub.csv\u0022, index=True)  \n    ","languageName":"Python","htmlOutputFileUrl":null,"outputFiles":[{"fileName":"sub.csv","fileUrl":"https://www.kaggle.io/svf/253094/5bab5c1bd71ec87906ff01a8e24db673/sub.csv","fileType":".csv","fileLinesUrlTemplate":"/svcj/253094/5bab5c1bd71ec87906ff01a8e24db673/101/sub.csv","linesToSend":101,"csvHeaderValidationErrors":"","size":351785336}],"downloadAllFilesUrl":"/scripts/svzip/253094","runInfo":{"isValidStatus":true,"failureMessage":"","exitCode":0,"succeeded":true,"dockerImageName":"kaggle/python","dockerfileUrl":"https://github.com/Kaggle/docker-python/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/python/","dockerImageId":"1dccf8bcc87efe5a7290d7214b486c04634fd6a3adf6662072ce118ddbcc7aa6","timeoutExceeded":false,"runTimeSeconds":765.966214895248,"usedAllSpace":false,"queuedSeconds":0.524,"outputSizeBytes":351785336},"versionHistory":[{"id":253094,"title":"grid_plus_classifier","isForkParent":false,"url":"/svpons/facebook-v-predicting-check-ins/grid-plus-classifier/run/253094","versionNumber":1,"lastRunTime":"2016-05-31T15:00:58.633Z","status":"complete","runInfo":{"isValidStatus":true,"failureMessage":"","exitCode":0,"succeeded":true,"dockerImageName":"kaggle/python","dockerfileUrl":"https://github.com/Kaggle/docker-python/blob/master/Dockerfile","dockerHubUrl":"https://registry.hub.docker.com/u/kaggle/python/","dockerImageId":"1dccf8bcc87efe5a7290d7214b486c04634fd6a3adf6662072ce118ddbcc7aa6","timeoutExceeded":false,"runTimeSeconds":765.966214895248,"usedAllSpace":false},"outputFilesTotalSizeBytes":351785336,"languageName":"Python","isNotebook":false,"linesChangedFromPrevious":0,"linesInsertedFromPrevious":0,"linesDeletedFromPrevious":0}],"sanitizeHtml":false,"initialScriptVersionId":253094,"initialTab":null,"baseUrl":"/svpons/facebook-v-predicting-check-ins/grid-plus-classifier","toggleScriptIsHiddenUrl":"/scripts/67603/hidden/toggle","scriptIsHidden":false,"isAdmin":false,"toggleScriptLanguageTemplateUrl":"/scripts/67603/template/toggle","scriptIsLanguageTemplate":false,"rerunScriptUrl":"/scripts/rerun?id=253094","forksBaseUrl":"/scripts/forks/67603/0","hasForks":true,"newForkUrl":"/c/facebook-v-predicting-check-ins/scripts/fork/253094","isNotebook":false,"isrMarkdown":false,"scriptId":67603,"scriptVersionId":253094,"getCommentsUrl":"/scripts/comments","postCommentUrl":"/scripts/comments/ajax","scriptVersionHasError":false,"userCanEditScript":false,"showSubmitToCompButtons":false,"submitToCompUrl":"/competitions/scripts/submit","competitionName":"Facebook V: Predicting Check Ins","currentScriptVersionIsBusy":false,"statusCallbackUrl":"/scripts/status?id=253094","forkParentUrl":"","forkParentTitle":null,"forkParentAuthorUrl":null,"forkParentAuthorDisplayName":null,"forkDiffUrl":"/scripts/diff/0/253094","forkDiffLinesChanged":0,"forkDiffLinesDeleted":0,"forkDiffLinesInserted":0,"voteButton":{"totalVotes":22,"hasAlreadyVotedUp":false,"hasAlreadyVotedDown":false,"canUpvote":true,"canDownvote":false,"voteUpUrl":"/scripts/vote?id=67603","voteDownUrl":null,"voters":[{"userId":233196,"displayName":"Evan Miller","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/031741853441d7c93e9a50ffbabffb86.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/evanmiller"},{"userId":440687,"displayName":"Laggle","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/c9d0bad00016d95af7712d96425c47ee.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/loikaggle"},{"userId":114978,"displayName":"Triskelion","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/f7ae63ae004048b87b615933781bd102.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/triskelion"},{"userId":342494,"displayName":"AnujChopra","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/0c9948c6fdee59cc474e79b4774c5d5e.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/chopra"},{"userId":79411,"displayName":"Matteo Franchi","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/3aca98b1dfa163f075a8151b965938ac.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/franchi"},{"userId":526714,"displayName":"sagol","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/c1039282b0bebb26f9d09f21027872bc.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/sagol79"},{"userId":459313,"displayName":"Chen","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/f52a868d0415e4697924f9a5503afe98.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/chenzw"},{"userId":52131,"displayName":"saihttam","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/d48a857d4fed711edd1d0a69bbdbbf64.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/saihttam"},{"userId":108385,"displayName":"Mojtaba Kohram","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/019bbf40daf7ac6d65a14cd6ca07513e.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/mkohram"},{"userId":341105,"displayName":"Yutern","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/696122831697982f5a57ab803a3215f3.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/yutern"},{"userId":174077,"displayName":"Li Li","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/33df4880e324f8f310c389a1472c283a.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/aikinogard"},{"userId":382390,"displayName":"VadimMalykh","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/b5c65ffb1bdb573c5a0bf7c52b8d609a.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/vadimmalykh"},{"userId":548136,"displayName":"Rafael Moraes","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/23e8fdb8a32741aa352fe324595b9feb.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/rafaelmm"},{"userId":604466,"displayName":"David","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/0e6a2d2209809d8fbf835a8fdc0ad797.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/overfit"},{"userId":553021,"displayName":"Khanh","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/49b5c97611c3478ff3c342c325d1ec11.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/knguyen"},{"userId":494638,"displayName":"micheal_kim","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/1b5494a2c170140372a18ab36fa16de6.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/michealkim"},{"userId":304553,"displayName":"Kozyr","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/7f70fff116e3ad7f906c050f7fbb6484.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/dkozyr"},{"userId":144035,"displayName":"rakhlin","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/9f5a13b178303c64e199ef521cf53b56.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/rakhlin"},{"userId":65017,"displayName":"Sandro","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/0c009bad626813fea3a23a11dcbfdee5.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/svpons"},{"userId":533501,"displayName":"MarekKowalski","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/7fd614433915434eb769cca01b876ee3.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/marekkowalski"},{"userId":7490,"displayName":"Larry Freeman","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/ecfb016e56d5df6d0622cc90953dce8d.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/larryfreeman"},{"userId":283587,"displayName":"Mikhail Pershin","avatarThumbnailUrl":"https://secure.gravatar.com/avatar/fa0312516507972b6547770fc04e7345.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","profileUrl":"/pershinmr"}],"currentUserInfo":null,"showVoters":true,"upVoteIntercomEventName":"upvote_script"},"dateUpdated":"2016-05-31T15:00:59.157Z","userName":"Sandro","userUrl":"/svpons","userAvatarImageUrl":"https://secure.gravatar.com/avatar/0c009bad626813fea3a23a11dcbfdee5.jpg?r=pg\u0026s=100\u0026d=https%3a%2f%2fkaggle2.blob.core.windows.net%2favatars%2fthumbnails%2fdefault-thumb.png","parentName":"Facebook V: Predicting Check Ins","parentUrl":"/c/facebook-v-predicting-check-ins/scripts","scriptLanguage":"Python script","totalViews":3993,"title":"grid_plus_classifier","titleUrl":"/svpons/facebook-v-predicting-check-ins/grid-plus-classifier","thumbnailImageUrl":"https://kaggle2.blob.core.windows.net/competitions/kaggle/5186/logos/thumb76_76.png","menuLinks":[{"href":null,"text":"Code","title":"Code","tab":"code","count":null,"showZeroCountExplicitly":false},{"href":null,"text":"Output","title":"Output","tab":"output","count":1,"showZeroCountExplicitly":false},{"href":null,"text":"Comments","title":"Comments","tab":"comments","count":28,"showZeroCountExplicitly":true},{"href":null,"text":"Log","title":"Log","tab":"log","count":null,"showZeroCountExplicitly":false},{"href":null,"text":"Versions","title":"Versions","tab":"versions","count":1,"showZeroCountExplicitly":false},{"href":null,"text":"Forks","title":"Forks","tab":"forks","count":14,"showZeroCountExplicitly":false}],"rightMenuLinks":[],"callToAction":{"href":"/c/facebook-v-predicting-check-ins/scripts/fork/253094","text":"Fork Script","title":"Fork Script","tab":null,"count":null,"showZeroCountExplicitly":false}}), document.getElementById("react-ScriptViewer-1"));
ReactDOM.render(React.createElement(KaggleReactComponents.SiteHeaderContainer, {}), document.getElementById("react-SiteHeaderContainer-2"));

</script>






    <script type="text/javascript">
        var _gaq = _gaq || [];
        _gaq.push(['_setAccount', 'UA-12629138-1']);
        _gaq.push(['_trackPageview']);
        _gaq.push(['_trackPageLoadTime']);
        _gaq.push(['_setCustomVar', 1, 'usertype', 'anonymous', 2]);
        (function () {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        })();
    
       
        var trackOutboundLink = function(url) {
            ga('send', 'event', 'outbound', 'click', url, {'hitCallback':
                    function () {
                        document.location = url;
                    }
            });
        }
    </script>




<!-- Cheers, RD00155D487FC8p. -->

</body>
</html>
